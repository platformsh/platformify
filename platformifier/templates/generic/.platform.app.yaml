# Container configuration.
# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: "{{ .Name }}"

# The type of the application to build.
type: "{{ .Type }}"

##########################
# Dependencies

# Installs global dependencies as part of the build process. They’re independent of your app’s dependencies and
# are available in the PATH during the build process and in the runtime environment. They’re installed before
# the build hook runs using a package manager for the language.
# More information: https://docs.platform.sh/create-apps/app-reference.html#dependencies
{{ if .Dependencies -}}
dependencies:
  {{ range $key, $value := .Dependencies -}}
  {{ $key }}:
    {{ range $key, $value := $value }}
    {{- $key }}: "{{ $value }}"
    {{- end }}
  {{- end }}
{{ else -}}
# dependencies:
  {{- if eq "python" .Runtime }}
#   python3: # Specify one Python 3 package per line.
#     numpy: '*'
  {{- else if eq "php" .Runtime }}
#   php: # Specify one Composer package per line.
#     drush/drush: '8.0.0'
#     composer/composer: '^2'
  {{- else if eq "nodejs" .Runtime }}
#   nodejs: # Specify one NPM package per line.
#     pm2: '^4.5.0'
  {{- else }}
#   runtime: # Specify one package per line.
#     package: 'version'
  {{- end }}
{{- end }}

# Specifies a default set of build tasks to run. Flavors are language-specific.
# More information: https://docs.platform.sh/create-apps/app-reference.html#build
{{ if .BuildFlavor -}}
build:
  flavor: {{ .BuildFlavor }}
{{- else -}}
# build:
#   flavor: none
{{- end }}

##########################
# Builds and variables

# Build-time visible variables.
{{ if .Environment -}}
variables:
  env:
    {{ range $key, $value := .Environment }}
    {{- $key }}: "{{ $value }}"
    {{ end -}}
{{ else -}}
# variables:
#   env:
#     # Add environment variables here that are static.
{{- if eq "python" .Runtime }}
#     PYTHONUNBUFFERED: "1"
{{- else if eq "php" .Runtime }}
#     XDEBUG_MODE: off
{{- else if eq "nodejs" .Runtime }}
#     NODE_ENV: development
{{- else }}
#     ENV_VARIABLE_NAME: "value"
{{- end }}
{{- end }}

# Hooks allow you to customize your code/environment as the project moves through the build and deploy stages.
# More information: https://docs.platform.sh/create-apps/app-reference.html#hooks
hooks:
  # The build hook is run after any build flavor.
  # More information: https://docs.platform.sh/create-apps/hooks/hooks-comparison.html#build-hook
  build: |
    set -eux
    {{ range $step := .BuildSteps }}
    {{- $step }}
    {{ else }}
    # Add build steps here.
    # echo 'I am a build step'
    {{ end }}
  # The deploy hook is run after the app container has been started, but before it has started accepting requests.
  # More information: https://docs.platform.sh/create-apps/hooks/hooks-comparison.html#deploy-hook
  deploy: |
    set -eux
    {{ range $deploycmd := .DeployCommand }}
    {{- $deploycmd }}
    {{ else -}}
    # echo 'Put your deploy command here'
    {{ end }}

##########################
# Web configuration

# The configuration of the application when it is exposed to the web.
web:
  # You can listen to a UNIX socket (unix) or a TCP port (tcp, default).
  {{- if eq "php" .Runtime }}
  # For PHP, the defaults are configured for PHP-FPM and shouldn't need adjustment.
  {{- end }}
  # Read more about upstream here: https://docs.platform.sh/create-apps/app-reference.html#upstream
  {{- if .SocketFamily }}
  upstream:
    socket_family: {{ .SocketFamily }}
  {{- else }}
  # upstream:
  #  socket_family: unix
  {{- end }}

  {{- if .WebCommand }}
  commands:
    # The command to start your application.
    # You can use the $PORT or the $SOCKET environment variable depending on the socket family of your upstream
    start: {{ quote .WebCommand }}
  {{- else }}
  # commands:
  #   The command to start your application.
  #   You can use the $PORT or the $SOCKET environment variable depending on the socket family of your upstream
  {{- if eq "php" .Runtime }}
  #   PHP applications run PHP-fpm by default
  #   Read about alternative commands here: https://docs.platform.sh/languages/php.html#alternate-start-commands
  {{- end }}
  #   start: echo 'Put your start command here'
  {{- end }}
  {{- if .Locations }}
  locations:
    {{ range $key, $value := .Locations -}}
    "{{ $key }}":
      {{- range $key, $value := $value }}
      {{ $key }}: {{ $value -}}
      {{ end }}
    {{ end -}}
  {{ else }}
  # The locations of the application. Use passthru or serve static files according to your application's needs.
  locations:
    "/":
      passthru: true
    # "/static":
    #  root: "static"
    #  expires: 1h
    #  allow: true
  {{ end }}

##########################
# Mounts

# The size of the persistent disk of the application (in MB).
{{ if .Disk -}}
disk: {{ .Disk }}
{{- else -}}
# disk: 512
{{- end }}

# The mounts that will be available to your application when deployed.
{{ if .Mounts -}}
mounts:
  {{ range $key, $value := .Mounts -}}
  "{{ $key }}":
    {{- range $key, $value := $value }}
    {{ $key }}: "{{ $value -}}"
    {{- end }}
  {{ end -}}
{{- else -}}
# mounts:
#   "/.cache": # Represents the path in the app.
#     source: "local" # "local" sources are unique to the app, while "service" sources can be shared among apps.
#     source_path: "cache" # The subdirectory within the mounted disk (the source) where the mount should point.
{{- end }}

##########################
# Services

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
{{ if .Relationships -}}
relationships:
  {{ range $key, $value := .Relationships }}
  {{- $key }}: "{{ $value }}"
  {{ end }}
{{ else }}
# relationships:
#   database: "db:postgresql"
{{ end }}
